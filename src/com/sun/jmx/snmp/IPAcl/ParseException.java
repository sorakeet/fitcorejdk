/**
 * Copyright (c) 1997, 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * Generated By:JavaCC: Do not edit this line. ParseException.java Version 0.7pre6
 */
/** Generated By:JavaCC: Do not edit this line. ParseException.java Version 0.7pre6 */
package com.sun.jmx.snmp.IPAcl;

class ParseException extends Exception{
    private static final long serialVersionUID=-3695190720704845876L;
    public Token currentToken;
    public int[][] expectedTokenSequences;
    public String[] tokenImage;
    protected boolean specialConstructor;
    protected String eol=System.getProperty("line.separator","\n");
    public ParseException(Token currentTokenVal,
                          int[][] expectedTokenSequencesVal,
                          String[] tokenImageVal
    ){
        super("");
        specialConstructor=true;
        currentToken=currentTokenVal;
        expectedTokenSequences=expectedTokenSequencesVal;
        tokenImage=tokenImageVal;
    }
    public ParseException(){
        super();
        specialConstructor=false;
    }

    public ParseException(String message){
        super(message);
        specialConstructor=false;
    }

    public String getMessage(){
        if(!specialConstructor){
            return super.getMessage();
        }
        String expected="";
        int maxSize=0;
        for(int i=0;i<expectedTokenSequences.length;i++){
            if(maxSize<expectedTokenSequences[i].length){
                maxSize=expectedTokenSequences[i].length;
            }
            for(int j=0;j<expectedTokenSequences[i].length;j++){
                expected+=tokenImage[expectedTokenSequences[i][j]]+" ";
            }
            if(expectedTokenSequences[i][expectedTokenSequences[i].length-1]!=0){
                expected+="...";
            }
            expected+=eol+"    ";
        }
        String retval="Encountered \"";
        Token tok=currentToken.next;
        for(int i=0;i<maxSize;i++){
            if(i!=0) retval+=" ";
            if(tok.kind==0){
                retval+=tokenImage[0];
                break;
            }
            retval+=add_escapes(tok.image);
            tok=tok.next;
        }
        retval+="\" at line "+currentToken.next.beginLine+", column "+currentToken.next.beginColumn+"."+eol;
        if(expectedTokenSequences.length==1){
            retval+="Was expecting:"+eol+"    ";
        }else{
            retval+="Was expecting one of:"+eol+"    ";
        }
        retval+=expected;
        return retval;
    }

    protected String add_escapes(String str){
        StringBuffer retval=new StringBuffer();
        char ch;
        for(int i=0;i<str.length();i++){
            switch(str.charAt(i)){
                case 0:
                    continue;
                case '\b':
                    retval.append("\\b");
                    continue;
                case '\t':
                    retval.append("\\t");
                    continue;
                case '\n':
                    retval.append("\\n");
                    continue;
                case '\f':
                    retval.append("\\f");
                    continue;
                case '\r':
                    retval.append("\\r");
                    continue;
                case '\"':
                    retval.append("\\\"");
                    continue;
                case '\'':
                    retval.append("\\\'");
                    continue;
                case '\\':
                    retval.append("\\\\");
                    continue;
                default:
                    if((ch=str.charAt(i))<0x20||ch>0x7e){
                        String s="0000"+Integer.toString(ch,16);
                        retval.append("\\u"+s.substring(s.length()-4,s.length()));
                    }else{
                        retval.append(ch);
                    }
                    continue;
            }
        }
        return retval.toString();
    }
}
