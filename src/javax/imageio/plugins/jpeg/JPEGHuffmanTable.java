/**
 * Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package javax.imageio.plugins.jpeg;

import java.util.Arrays;

public class JPEGHuffmanTable{
    private static final short[] StdDCLuminanceLengths={
            0x00,0x01,0x05,0x01,0x01,0x01,0x01,0x01,
            0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };
    private static final short[] StdDCLuminanceValues={
            0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
            0x08,0x09,0x0a,0x0b,
    };
    public static final JPEGHuffmanTable
            StdDCLuminance=new JPEGHuffmanTable(StdDCLuminanceLengths,
            StdDCLuminanceValues,false);
    private static final short[] StdDCChrominanceLengths={
            0x00,0x03,0x01,0x01,0x01,0x01,0x01,0x01,
            0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
    };
    private static final short[] StdDCChrominanceValues={
            0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
            0x08,0x09,0x0a,0x0b,
    };
    public static final JPEGHuffmanTable
            StdDCChrominance=new JPEGHuffmanTable(StdDCChrominanceLengths,
            StdDCChrominanceValues,false);
    private static final short[] StdACLuminanceLengths={
            0x00,0x02,0x01,0x03,0x03,0x02,0x04,0x03,
            0x05,0x05,0x04,0x04,0x00,0x00,0x01,0x7d,
    };
    private static final short[] StdACLuminanceValues={
            0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,
            0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,
            0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,
            0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,
            0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,
            0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,
            0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,
            0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,
            0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,
            0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,
            0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,
            0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,
            0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,
            0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,
            0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,
            0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,
            0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,
            0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,
            0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,
            0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,
            0xf9,0xfa,
    };
    public static final JPEGHuffmanTable
            StdACLuminance=new JPEGHuffmanTable(StdACLuminanceLengths,
            StdACLuminanceValues,false);
    private static final short[] StdACChrominanceLengths={
            0x00,0x02,0x01,0x02,0x04,0x04,0x03,0x04,
            0x07,0x05,0x04,0x04,0x00,0x01,0x02,0x77,
    };
    private static final short[] StdACChrominanceValues={
            0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,
            0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,
            0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,
            0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,
            0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,
            0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,
            0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,
            0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,
            0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,
            0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,
            0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,
            0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,
            0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,
            0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,
            0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,
            0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,
            0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,
            0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,
            0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,
            0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,
            0xf9,0xfa,
    };
    public static final JPEGHuffmanTable
            StdACChrominance=new JPEGHuffmanTable(StdACChrominanceLengths,
            StdACChrominanceValues,false);
    private short[] lengths;
    private short[] values;

    public JPEGHuffmanTable(short[] lengths,short[] values){
        if(lengths==null||values==null||
                lengths.length==0||values.length==0||
                lengths.length>16||values.length>256){
            throw new IllegalArgumentException("Illegal lengths or values");
        }
        for(int i=0;i<lengths.length;i++){
            if(lengths[i]<0){
                throw new IllegalArgumentException("lengths["+i+"] < 0");
            }
        }
        for(int i=0;i<values.length;i++){
            if(values[i]<0){
                throw new IllegalArgumentException("values["+i+"] < 0");
            }
        }
        this.lengths=Arrays.copyOf(lengths,lengths.length);
        this.values=Arrays.copyOf(values,values.length);
        validate();
    }

    private void validate(){
        int sumOfLengths=0;
        for(int i=0;i<lengths.length;i++){
            sumOfLengths+=lengths[i];
        }
        if(sumOfLengths!=values.length){
            throw new IllegalArgumentException("lengths do not correspond "+
                    "to length of value table");
        }
    }

    private JPEGHuffmanTable(short[] lengths,short[] values,boolean copy){
        if(copy){
            this.lengths=Arrays.copyOf(lengths,lengths.length);
            this.values=Arrays.copyOf(values,values.length);
        }else{
            this.lengths=lengths;
            this.values=values;
        }
    }

    public short[] getLengths(){
        return Arrays.copyOf(lengths,lengths.length);
    }

    public short[] getValues(){
        return Arrays.copyOf(values,values.length);
    }

    public String toString(){
        String ls=System.getProperty("line.separator","\n");
        StringBuilder sb=new StringBuilder("JPEGHuffmanTable");
        sb.append(ls).append("lengths:");
        for(int i=0;i<lengths.length;i++){
            sb.append(" ").append(lengths[i]);
        }
        sb.append(ls).append("values:");
        for(int i=0;i<values.length;i++){
            sb.append(" ").append(values[i]);
        }
        return sb.toString();
    }
}
