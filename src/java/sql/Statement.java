/**
 * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package java.sql;

public interface Statement extends Wrapper, AutoCloseable{
    //--------------------------JDBC 3.0-----------------------------
    int CLOSE_CURRENT_RESULT=1;
    int KEEP_CURRENT_RESULT=2;
    int CLOSE_ALL_RESULTS=3;
    //----------------------------------------------------------------------
    int SUCCESS_NO_INFO=-2;
    int EXECUTE_FAILED=-3;
    int RETURN_GENERATED_KEYS=1;
    int NO_GENERATED_KEYS=2;

    ResultSet executeQuery(String sql) throws SQLException;

    int executeUpdate(String sql) throws SQLException;

    void close() throws SQLException;

    int getMaxFieldSize() throws SQLException;

    void setMaxFieldSize(int max) throws SQLException;

    int getMaxRows() throws SQLException;

    void setMaxRows(int max) throws SQLException;
    //----------------------- Multiple Results --------------------------

    void setEscapeProcessing(boolean enable) throws SQLException;

    int getQueryTimeout() throws SQLException;

    void setQueryTimeout(int seconds) throws SQLException;

    void cancel() throws SQLException;
    //--------------------------JDBC 2.0-----------------------------

    SQLWarning getWarnings() throws SQLException;

    void clearWarnings() throws SQLException;

    void setCursorName(String name) throws SQLException;

    boolean execute(String sql) throws SQLException;

    ResultSet getResultSet() throws SQLException;

    int getUpdateCount() throws SQLException;

    boolean getMoreResults() throws SQLException;

    int getFetchDirection() throws SQLException;

    void setFetchDirection(int direction) throws SQLException;

    int getFetchSize() throws SQLException;

    void setFetchSize(int rows) throws SQLException;

    int getResultSetConcurrency() throws SQLException;

    int getResultSetType() throws SQLException;

    void addBatch(String sql) throws SQLException;

    void clearBatch() throws SQLException;

    int[] executeBatch() throws SQLException;

    Connection getConnection() throws SQLException;

    boolean getMoreResults(int current) throws SQLException;

    ResultSet getGeneratedKeys() throws SQLException;

    int executeUpdate(String sql,int autoGeneratedKeys) throws SQLException;

    int executeUpdate(String sql,int columnIndexes[]) throws SQLException;

    int executeUpdate(String sql,String columnNames[]) throws SQLException;

    boolean execute(String sql,int autoGeneratedKeys) throws SQLException;

    boolean execute(String sql,int columnIndexes[]) throws SQLException;

    boolean execute(String sql,String columnNames[]) throws SQLException;

    int getResultSetHoldability() throws SQLException;

    boolean isClosed() throws SQLException;

    boolean isPoolable()
            throws SQLException;

    void setPoolable(boolean poolable)
            throws SQLException;
    //--------------------------JDBC 4.1 -----------------------------

    public void closeOnCompletion() throws SQLException;

    public boolean isCloseOnCompletion() throws SQLException;
    //--------------------------JDBC 4.2 -----------------------------

    default long getLargeUpdateCount() throws SQLException{
        throw new UnsupportedOperationException("getLargeUpdateCount not implemented");
    }

    default long getLargeMaxRows() throws SQLException{
        return 0;
    }

    default void setLargeMaxRows(long max) throws SQLException{
        throw new UnsupportedOperationException("setLargeMaxRows not implemented");
    }

    default long[] executeLargeBatch() throws SQLException{
        throw new UnsupportedOperationException("executeLargeBatch not implemented");
    }

    default long executeLargeUpdate(String sql) throws SQLException{
        throw new UnsupportedOperationException("executeLargeUpdate not implemented");
    }

    default long executeLargeUpdate(String sql,int autoGeneratedKeys)
            throws SQLException{
        throw new SQLFeatureNotSupportedException("executeLargeUpdate not implemented");
    }

    default long executeLargeUpdate(String sql,int columnIndexes[]) throws SQLException{
        throw new SQLFeatureNotSupportedException("executeLargeUpdate not implemented");
    }

    default long executeLargeUpdate(String sql,String columnNames[])
            throws SQLException{
        throw new SQLFeatureNotSupportedException("executeLargeUpdate not implemented");
    }
}
