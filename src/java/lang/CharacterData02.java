// This file was generated AUTOMATICALLY from a template file Wed Mar 15 01:26:44 PDT 2017
/**
 * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package java.lang;

class CharacterData02 extends CharacterData{
    static final CharacterData instance=new CharacterData02();
    // The following tables and code generated using:
    // java GenerateCharacter -plane 2 -template c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u131/8869/jdk/make/data/characterdata/CharacterData02.java.template -spec c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u131/8869/jdk/make/data/unicodedata/UnicodeData.txt -specialcasing c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u131/8869/jdk/make/data/unicodedata/SpecialCasing.txt -proplist c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u131/8869/jdk/make/data/unicodedata/PropList.txt -o c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u131/8869/build/windows-amd64/jdk/gensrc/java/lang/CharacterData02.java -string -usecharforbyte 11 4 1
    // The X table has 2048 entries for a total of 4096 bytes.
    static final char X[]=(
            "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\020\040\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\060\000\000\000\000\000\000\100\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\000\000\000\000\120\000\000\000\000\000\000"+
                    "\000\000\000\000\000\100\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
                    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040").toCharArray();    int getProperties(int ch){
        char offset=(char)ch;
        int props=A[Y[X[offset>>5]|((offset>>1)&0xF)]|(offset&0x1)];
        return props;
    }
    // The Y table has 96 entries for a total of 192 bytes.
    static final char Y[]=(
            "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\000\000\000\000\000\002\004\004\004\004\004\004\004\004\004\004"+
                    "\004\004\004\004\004\004\004\004\004\004\000\000\000\000\000\000\000\000\000"+
                    "\000\002\004\004\004\004\004\000\000\000\000\000\000\000\000\000\000\000\000"+
                    "\000\000\000\004\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000"+
                    "\000").toCharArray();
    // The A table has 8 entries for a total of 32 bytes.
    static final int A[]=new int[8];    int getPropertiesEx(int ch){
        char offset=(char)ch;
        int props=B[Y[X[offset>>5]|((offset>>1)&0xF)]|(offset&0x1)];
        return props;
    }
    static final String A_DATA=
            "\000\u7005\000\u7005\000\u7005\u7800\000\u7800\000\u7800\000\000\u7725\000"+
                    "\u7005";
    // The B table has 8 entries for a total of 16 bytes.
    static final char B[]=(
            "\020\020\020\000\000\000\020\020").toCharArray();    boolean isOtherLowercase(int ch){
        int props=getPropertiesEx(ch);
        return (props&0x0001)!=0;
    }

    static{
        { // THIS CODE WAS AUTOMATICALLY CREATED BY GenerateCharacter:
            char[] data=A_DATA.toCharArray();
            assert (data.length==(8*2));
            int i=0, j=0;
            while(i<(8*2)){
                int entry=data[i++]<<16;
                A[j++]=entry|data[i++];
            }
        }
    }

    private CharacterData02(){
    }    boolean isOtherUppercase(int ch){
        int props=getPropertiesEx(ch);
        return (props&0x0002)!=0;
    }



    boolean isOtherAlphabetic(int ch){
        int props=getPropertiesEx(ch);
        return (props&0x0004)!=0;
    }



    boolean isIdeographic(int ch){
        int props=getPropertiesEx(ch);
        return (props&0x0010)!=0;
    }



    int getType(int ch){
        int props=getProperties(ch);
        return (props&0x1F);
    }



    boolean isJavaIdentifierStart(int ch){
        int props=getProperties(ch);
        return ((props&0x00007000)>=0x00005000);
    }

    boolean isJavaIdentifierPart(int ch){
        int props=getProperties(ch);
        return ((props&0x00003000)!=0);
    }

    boolean isUnicodeIdentifierStart(int ch){
        int props=getProperties(ch);
        return ((props&0x00007000)==0x00007000);
    }

    boolean isUnicodeIdentifierPart(int ch){
        int props=getProperties(ch);
        return ((props&0x00001000)!=0);
    }

    boolean isIdentifierIgnorable(int ch){
        int props=getProperties(ch);
        return ((props&0x00007000)==0x00001000);
    }

    int toLowerCase(int ch){
        int mapChar=ch;
        int val=getProperties(ch);
        if((val&0x00020000)!=0){
            int offset=val<<5>>(5+18);
            mapChar=ch+offset;
        }
        return mapChar;
    }

    int toUpperCase(int ch){
        int mapChar=ch;
        int val=getProperties(ch);
        if((val&0x00010000)!=0){
            int offset=val<<5>>(5+18);
            mapChar=ch-offset;
        }
        return mapChar;
    }

    int toTitleCase(int ch){
        int mapChar=ch;
        int val=getProperties(ch);
        if((val&0x00008000)!=0){
            // There is a titlecase equivalent.  Perform further checks:
            if((val&0x00010000)==0){
                // The character does not have an uppercase equivalent, so it must
                // already be uppercase; so add 1 to get the titlecase form.
                mapChar=ch+1;
            }else if((val&0x00020000)==0){
                // The character does not have a lowercase equivalent, so it must
                // already be lowercase; so subtract 1 to get the titlecase form.
                mapChar=ch-1;
            }
            // else {
            // The character has both an uppercase equivalent and a lowercase
            // equivalent, so it must itself be a titlecase form; return it.
            // return ch;
            //}
        }else if((val&0x00010000)!=0){
            // This character has no titlecase equivalent but it does have an
            // uppercase equivalent, so use that (subtract the signed case offset).
            mapChar=toUpperCase(ch);
        }
        return mapChar;
    }

    int digit(int ch,int radix){
        int value=-1;
        if(radix>=Character.MIN_RADIX&&radix<=Character.MAX_RADIX){
            int val=getProperties(ch);
            int kind=val&0x1F;
            if(kind==Character.DECIMAL_DIGIT_NUMBER){
                value=ch+((val&0x3E0)>>5)&0x1F;
            }else if((val&0xC00)==0x00000C00){
                // Java supradecimal digit
                value=(ch+((val&0x3E0)>>5)&0x1F)+10;
            }
        }
        return (value<radix)?value:-1;
    }

    int getNumericValue(int ch){
        int val=getProperties(ch);
        int retval=-1;
        switch(val&0xC00){
            default: // cannot occur
            case (0x00000000):         // not numeric
                retval=-1;
                break;
            case (0x00000400):              // simple numeric
                retval=ch+((val&0x3E0)>>5)&0x1F;
                break;
            case (0x00000800):       // "strange" numeric
                retval=-2;
                break;
            case (0x00000C00):           // Java supradecimal
                retval=(ch+((val&0x3E0)>>5)&0x1F)+10;
                break;
        }
        return retval;
    }

    boolean isWhitespace(int ch){
        return (getProperties(ch)&0x00007000)==0x00004000;
    }

    byte getDirectionality(int ch){
        int val=getProperties(ch);
        byte directionality=(byte)((val&0x78000000)>>27);
        if(directionality==0xF){
            directionality=Character.DIRECTIONALITY_UNDEFINED;
        }
        return directionality;
    }

    boolean isMirrored(int ch){
        return (getProperties(ch)&0x80000000)!=0;
    }

    ;
    // In all, the character property tables require 4320 bytes.
}
